@using FoodDeliveryNetwork.Web.ViewModels.Common;
@using FoodDeliveryNetwork.Web.ViewModels.Home;

@model CustomerAllRestaurantsViewModel

@{
    ViewBag.Title = "Home";
}

@*Search bar*@
@using (Html.BeginForm("Index", "Home", FormMethod.Get, new { @class = "row gy-2 gx-3 align-items-center mb-5" }))
{
    <div class="col-auto">
        @Html.TextBoxFor(m => m.BaseQueryModel.SearchTerm, new { @class = "form-control", placeholder = "Search" })
    </div>

    <div class="col-auto">
        @Html.Label("Sort by:", "Sort by:", new { @class = "visually-hidden", @for = "p1"})

        @{
            var enums = new[] { BaseQueryModelSort.Name, BaseQueryModelSort.Address };
        }

        @Html.DropDownListFor(m => m.BaseQueryModel.SortBy, new SelectList(enums), new { @class = "form-select", @id = "p1" })
    </div>

    <div class="col-auto">
        @Html.Label("Per Page:", "Per Page:", new { @class = "visually-hidden", @for = "p2"})
        @Html.DropDownListFor(m => m.BaseQueryModel.PageSize, new SelectList(new[] { 5, 20, 50, 100 }), new { @class = "form-select", @id = "p2"  })
    </div>

    //TODO: align button
    <div class="col-auto">
        <button type="submit" class="btn btn-primary mb-2">Search</button>
    </div>
}

@if (Model.TotalRestaurants == 0)
{
    <div class="alert alert-info" role="alert">
        No restaurants!
    </div>
}
else
{
    int previousPage = Model.BaseQueryModel.Page - 1;
    if (previousPage < 1)
    {
        previousPage = 1;
    }

    int maxPage = (int)Math.Ceiling((double)Model.TotalRestaurants /
        Model.BaseQueryModel.PageSize);

    <div class="row gy-4 mb-4">
        @foreach (var restaurant in Model.Restaurants)
        {
            <div class="col-sm-12 col-md-6 col-lg-6 col-xl-4 col-xxl-3 d-flex align-items-stretch">
                @await Html.PartialAsync("_SingleRestaurantPartial", restaurant)
            </div>
        }
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @((Model.BaseQueryModel.Page == 1) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = previousPage, Model.BaseQueryModel.SortBy, Model.BaseQueryModel.PageSize, Model.BaseQueryModel.SearchTerm })" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">Page @Model.BaseQueryModel.Page</a>
            </li>
            <li class="page-item @((Model.BaseQueryModel.Page == maxPage) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("Index", new { page = Model.BaseQueryModel.Page + 1, Model.BaseQueryModel.SortBy, Model.BaseQueryModel.PageSize, Model.BaseQueryModel.SearchTerm })" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}
