@using FoodDeliveryNetwork.Web.ViewModels.Common;
@using FoodDeliveryNetwork.Web.ViewModels.Home;

@model CustomerAllOrdersViewModel

@{
    ViewBag.Title = "All Orders";
}

@*Search bar*@
@using (Html.BeginForm("MyOrders", "Home", FormMethod.Get, new { @class = "row gy-2 gx-3 align-items-center mb-5" }))
{
    <div class="col-auto">
        @Html.TextBoxFor(m => m.SearchTerm, new { @class = "form-control", placeholder = "Search" })
    </div>

    <div class="col-auto">
        @Html.Label("Sort by:", "Sort by:", new { @class = "visually-hidden", @for = "p1"})
        @Html.DropDownListFor(m => m.SortBy, new SelectList(new[] { BaseQueryModelSort.Newest, BaseQueryModelSort.Oldest}), new { @class = "form-select", @id = "p1" })
    </div>

    <div class="col-auto">
        @Html.Label("Per Page:", "Per Page:", new { @class = "visually-hidden", @for = "p2"})
        @Html.DropDownListFor(m => m.PageSize, new SelectList(new[] { 5, 20, 50, 100 }), new { @class = "form-select", @id = "p2"  })
    </div>

    //TODO: align button
    <div class="col-auto">
        <button type="submit" class="btn btn-primary mb-2">Search</button>
    </div>
}

@if (Model.TotalOrders == 0)
{
    <div class="alert alert-info" role="alert">
        No recent orders!
    </div>
}
else
{
    CustomerAllOrdersViewModel previous = new CustomerAllOrdersViewModel()
                {
                    Page = Model.Page - 1 < 1 ? 1 : Model.Page - 1,
                    PageSize = Model.PageSize,
                    SortBy = Model.SortBy,
                    SearchTerm = Model.SearchTerm
                };
    CustomerAllOrdersViewModel next = new CustomerAllOrdersViewModel()
                {
                    Page = Model.Page + 1,
                    PageSize = Model.PageSize,
                    SortBy = Model.SortBy,
                    SearchTerm = Model.SearchTerm
                };

    int maxPage = (int)Math.Ceiling((double)Model.TotalOrders /
        Model.PageSize);

    @foreach (var application in Model.Orders)
    {
        @await Html.PartialAsync("_CustomerBasicOrderPartial", application)
    }

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @((Model.Page == 1) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("MyOrders", previous)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">Page @Model.Page</a>
            </li>
            <li class="page-item @((Model.Page == maxPage) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("MyOrders", next)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}
