@using FoodDeliveryNetwork.Web.ViewModels.Common;
@using FoodDeliveryNetwork.Web.ViewModels.Home;

@model CustomerAllOrdersViewModel

@{
    ViewBag.Title = "Recent Orders";
}

<div class="w-100 mb-3">
    <div class="btn-group w-100" role="group" aria-label="Basic example">
        <a class="btn btn-info disabled" disabled>Recent orders</a>
        <a class="btn btn-info" asp-action="MyOrders">All orders</a>
    </div>
</div>

@*Search bar*@
<div class="d-flex w-100">
    @using (Html.BeginForm("MyRecentOrders", "Home", FormMethod.Get, new { @class = "ms-auto" }))
    {
        <div class="row mb-4">
            <div class="col-auto pe-1">
                @Html.TextBoxFor(m => m.SearchTerm, new { @class = "form-control", placeholder = "Search" })
            </div>

            <div class="col-auto px-1">
                @Html.Label("Sort by:", "Sort by:", new { @class = "visually-hidden", @for = "p1"})
                @Html.DropDownListFor(m => m.SortBy, new SelectList(new[] { BaseQueryModelSort.Newest, BaseQueryModelSort.Oldest}), new { @class = "form-select", @id = "p1" })
            </div>

            <div class="col-auto px-1">
                @Html.Label("Per Page:", "Per Page:", new { @class = "visually-hidden", @for = "p2"})
                @Html.DropDownListFor(m => m.PageSize, new SelectList(new[] { 5, 20, 50, 100 }), new { @class = "form-select", @id = "p2"  })
            </div>

            <div class="col-auto ps-1">
                <button type="submit" class="btn btn-primary mb-2">Search</button>
            </div>
        </div>
    }
</div>

@if (Model.TotalOrders == 0)
{
    <div class="alert alert-info" role="alert">
        No recent orders!
    </div>
}
else
{
    CustomerAllOrdersViewModel previous = new CustomerAllOrdersViewModel()
                {
                    Page = Model.Page - 1 < 1 ? 1 : Model.Page - 1,
                    PageSize = Model.PageSize,
                    SortBy = Model.SortBy,
                    SearchTerm = Model.SearchTerm
                };
    CustomerAllOrdersViewModel next = new CustomerAllOrdersViewModel()
                {
                    Page = Model.Page + 1,
                    PageSize = Model.PageSize,
                    SortBy = Model.SortBy,
                    SearchTerm = Model.SearchTerm
                };

    int maxPage = (int)Math.Ceiling((double)Model.TotalOrders /
        Model.PageSize);

    <div class="row gy-4 mb-4">
        @foreach (var application in Model.Orders)
        {
            <div class="col-sm-12 col-md-6 col-lg-6 col-xl-4 col-xxl-3 d-flex align-items-stretch">
                @await Html.PartialAsync("_CustomerBasicOrderPartial", application)
            </div>
        }
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            <li class="page-item @((Model.Page == 1) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("MyRecentOrders", previous)" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <li class="page-item disabled">
                <a class="page-link" href="#" tabindex="-1">Page @Model.Page</a>
            </li>
            <li class="page-item @((Model.Page == maxPage) ? "disabled" : "")">
                <a class="page-link" href="@Url.Action("MyRecentOrders", next)" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
}
